{"version":3,"sources":["components/Editor.js","components/Users.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["require","Editor","props","useState","clientCode","setClientCode","serverCode","setServerCode","line","setLine","socket","ch","setCh","useEffect","on","data","className","onClick","emit","value","options","mode","theme","lineNumbers","onChange","editor","getCursor","setCursor","Users","users","setUsers","console","log","render_users","map","x","key","length","Login","name","setName","placeholder","e","target","handler","socketIOClient","App","res","setRes","userName","setUserName","msg","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a6426e70.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\nimport \"./Editor.css\";\n\nrequire(\"codemirror/lib/codemirror.css\");\nrequire(\"codemirror/theme/material.css\");\nrequire(\"codemirror/mode/clike/clike.js\");\nrequire(\"codemirror/mode/javascript/javascript.js\");\n\n/*const ENDPOINT = \"192.168.1.101:9000\";\nconst socket = socketIOClient(ENDPOINT);*/\nfunction Editor(props) {\n  const [clientCode, setClientCode] = useState(\"\");\n  const [serverCode, setServerCode] = useState(\"\");\n  const [line, setLine] = useState(1);\n  const socket = props.socket;\n  const [ch, setCh] = useState(0);\n\n  function compile() {\n    socket.emit(\"compile\");\n  }\n  useEffect(() => {\n    if (socket != null) {\n      socket.on(\"receive-msg\", data => {\n        setServerCode(data);\n        setClientCode(data);\n      });\n    }\n  });\n\n  let title = \"< MergeCode />\";\n\n  return (\n    <div className=\"Editor\">\n      <nav>\n        <h3>{title}</h3>\n        <button\n          onClick={compile}\n          className=\"btn btn-default btn-danger compile\"\n        >\n          Compile\n        </button>\n      </nav>\n\n      <CodeMirror\n        value={clientCode}\n        options={{\n          mode: \"javascript\",\n          theme: \"material\",\n          lineNumbers: true\n        }}\n        onChange={(editor, data, value) => {\n          setLine(editor.getCursor().line);\n          setCh(editor.getCursor().ch);\n          if (value === \"\") {\n            setClientCode(\"\");\n            socket.emit(\"change-code\", \"\");\n          } else {\n            setClientCode(value);\n            if (serverCode !== clientCode) {\n              socket.emit(\"change-code\", clientCode);\n            }\n          }\n          editor.setCursor({ line: line, ch: ch });\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Editor;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Users.css\";\n\nfunction Users(props) {\n  const [users, setUsers] = useState([]);\n  const socket = props.socket;\n\n  useEffect(() => {\n    if (socket != null) {\n      socket.on(\"user-list\", data => {\n        setUsers(data);\n        console.log(data);\n      });\n    }\n  });\n\n  var render_users = users.map(x => (\n    <li className=\"user_key\" key={x}>\n      {x}\n    </li>\n  ));\n\n  return (\n    <div className=\"Users\">\n      <h3 className=\"title\">User Currently Online</h3>\n      <ul className=\"user-list\">\n        {users.length > 0 ? render_users : <span></span>}\n      </ul>\n    </div>\n  );\n}\n\nexport default Users;\n","import React, { useState } from \"react\";\nimport \"./Login.css\";\n\nfunction Login(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleSubmit() {\n    props.handler(name);\n  }\n\n  return (\n    <div className=\"Login\">\n      <div className=\"login-window\">\n        <p className=\"title\">Real Time Code Collaborator</p>\n        <input\n          className=\"input-usr\"\n          placeholder=\"Enter you name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />\n        <br />\n        <button className=\"join-btn\" onClick={handleSubmit}>\n          Join\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./components/Editor\";\nimport Users from \"./components/Users\";\nimport socketIOClient from \"socket.io-client\";\nimport Login from \"./components/Login\";\nimport \"./App.css\";\n\nconst ENDPOINT = \"http://52.15.58.91:9000\";\nconst socket = socketIOClient(ENDPOINT);\nfunction App() {\n  const [res, setRes] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n\n  useEffect(() => {\n    socket.on(\"compile-rec\", msg => {\n      setRes(msg);\n      console.log(msg);\n    });\n  });\n\n  function handleNameChange(name) {\n    setUserName(name);\n    socket.emit(\"join\", name);\n  }\n\n  return userName !== \"\" ? (\n    <div className=\"App\">\n      <Editor socket={socket} userName={userName} />\n      {console.log(userName)}\n      <textarea placeholder=\"Output goes here\" value={res} disabled></textarea>\n\n      <Users socket={socket} userName={userName} />\n    </div>\n  ) : (\n    <div className=\"App\">\n      <Login handler={handleNameChange} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}